/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.proyectoreque;

import java.awt.BorderLayout;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author chava
 */
public class newAppointmentFrame extends javax.swing.JPanel {

    /**
     * Creates new form newAppointmentFrame
     */
    public newAppointmentFrame() {
        initComponents();
    }
    
    int globalIndex;
    
    private String getDay(Date fecha) {
        if(fecha != null) {
            char fecha2 = fecha.toString().charAt(8);
            char fecha3 = fecha.toString().charAt(9);
            StringBuilder fechaA = new StringBuilder();
            fechaA.append(fecha2);
            fechaA.append(fecha3);
            String fechaB = fechaA.toString();     

            return fechaB;
        }
        return null;   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel7 = new javax.swing.JPanel();
        bg = new javax.swing.JPanel();
        jCalendar = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        panelHoras = new javax.swing.JPanel();
        panelHoras1 = new javax.swing.JPanel();
        btnConfirm = new javax.swing.JButton();
        btnCreateAppointment = new javax.swing.JButton();
        cmbSpeciality = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        cmbDoctors = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        btnSelectSpeciality = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(580, 430));
        setPreferredSize(new java.awt.Dimension(950, 430));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bg.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(30, 140, 200));
        jLabel1.setText("Select a date for the appointment:");

        panelHoras.setBackground(new java.awt.Color(244, 244, 246));

        panelHoras1.setBackground(new java.awt.Color(244, 244, 246));

        javax.swing.GroupLayout panelHoras1Layout = new javax.swing.GroupLayout(panelHoras1);
        panelHoras1.setLayout(panelHoras1Layout);
        panelHoras1Layout.setHorizontalGroup(
            panelHoras1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 177, Short.MAX_VALUE)
        );
        panelHoras1Layout.setVerticalGroup(
            panelHoras1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 342, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panelHorasLayout = new javax.swing.GroupLayout(panelHoras);
        panelHoras.setLayout(panelHorasLayout);
        panelHorasLayout.setHorizontalGroup(
            panelHorasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 408, Short.MAX_VALUE)
            .addGroup(panelHorasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelHorasLayout.createSequentialGroup()
                    .addComponent(panelHoras1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 231, Short.MAX_VALUE)))
        );
        panelHorasLayout.setVerticalGroup(
            panelHorasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 342, Short.MAX_VALUE)
            .addGroup(panelHorasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(panelHoras1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnConfirm.setForeground(new java.awt.Color(30, 140, 200));
        btnConfirm.setText("Confirm");
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        btnCreateAppointment.setBackground(new java.awt.Color(254, 255, 255));
        btnCreateAppointment.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnCreateAppointment.setForeground(new java.awt.Color(30, 140, 200));
        btnCreateAppointment.setText("Create appointment");
        btnCreateAppointment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCreateAppointmentMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnCreateAppointmentMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnCreateAppointmentMouseExited(evt);
            }
        });
        btnCreateAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateAppointmentActionPerformed(evt);
            }
        });

        cmbSpeciality.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "General Medicine", "Pediatrics", "Gynecology", "Internal Medicine", "General Surgery", "Psychology", "Physical Therapy" }));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(30, 140, 200));
        jLabel2.setText("Select a speciality:");

        cmbDoctors.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dr. Laura Thompson", "Dr. James Carter", "Dr. Ana Mart√≠nez", "Dr. Kevin Brown" }));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(30, 140, 200));
        jLabel3.setText("Select a doctor:");

        btnSelectSpeciality.setForeground(new java.awt.Color(30, 140, 200));
        btnSelectSpeciality.setText("Select");
        btnSelectSpeciality.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectSpecialityActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bgLayout = new javax.swing.GroupLayout(bg);
        bg.setLayout(bgLayout);
        bgLayout.setHorizontalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bgLayout.createSequentialGroup()
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(cmbSpeciality, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(bgLayout.createSequentialGroup()
                                .addComponent(jCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(btnConfirm))
                            .addGroup(bgLayout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(jLabel1)))
                        .addGap(26, 26, 26)
                        .addComponent(btnCreateAppointment))
                    .addGroup(bgLayout.createSequentialGroup()
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(cmbDoctors, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSelectSpeciality, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(56, 56, 56)
                        .addComponent(panelHoras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        bgLayout.setVerticalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bgLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnCreateAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnConfirm))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelHoras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bgLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbSpeciality, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelectSpeciality)
                        .addGap(49, 49, 49)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbDoctors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        add(bg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 730, 430));
    }// </editor-fold>//GEN-END:initComponents

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
        Date fecha = jCalendar.getDate();
        if(fecha != null){
            //String fecha4 = fecha.toString();
        String dia = getDay(fecha);
        
        horasFrame page1 = new horasFrame(dia);
        page1.setSize(718,330);
        page1.setLocation(0,0);
        
        panelHoras.setVisible(true);
        panelHoras.removeAll();
        panelHoras.add(page1, BorderLayout.CENTER);
        panelHoras.revalidate();
        panelHoras.repaint();
        }
    }//GEN-LAST:event_btnConfirmActionPerformed

    private void btnCreateAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateAppointmentActionPerformed
        int especialidad = cmbSpeciality.getSelectedIndex();
        int doctor = cmbDoctors.getSelectedIndex();
        Date fecha = jCalendar.getDate();
        
        if(fecha != null) {
            try {
                File nombre_archivo = new File("appointments.txt");
                FileWriter escritor = new FileWriter(nombre_archivo, true);
                String cadena;
                
                int contador = 0;
                try (BufferedReader br = new BufferedReader(new FileReader("appointments.txt"))) {
                    while (br.readLine() != null) {
                        contador++;
                    }
                }
                if(contador >= 3) {
                    JOptionPane.showMessageDialog(null, "Appointment's limit has been reached, delete an existent appointment", "Warning", JOptionPane.ERROR_MESSAGE);
                } else {
                    Date fechaHoy = new Date();
                    if(fechaHoy.after(fecha)){
                        JOptionPane.showMessageDialog(null, "Appointment's date isn't a valid date", "Warning", JOptionPane.ERROR_MESSAGE);
                    } else {
                        switch (especialidad) {
                            case 0:
                                cadena = especialidad + ";" + doctor + ";" + fecha + ";" + "7:30" + "\n";

                                escritor.write(cadena);
                                escritor.close();
                                JOptionPane.showConfirmDialog(null, "The new appointment has been created sucessfully", "Information", JOptionPane.DEFAULT_OPTION);
                                break;
                            case 1:
                                cadena = especialidad + ";" + doctor + ";" + fecha + ";" + "9:00" + "\n";

                                escritor.write(cadena);
                                escritor.close();
                                JOptionPane.showConfirmDialog(null, "The new appointment has been created sucessfully", "Information", JOptionPane.DEFAULT_OPTION);
                                break;
                            case 2:
                                cadena = especialidad + ";" + doctor + ";" + fecha + ";" + "10:30" + "\n";

                                escritor.write(cadena);
                                escritor.close();
                                JOptionPane.showConfirmDialog(null, "The new appointment has been created sucessfully", "Information", JOptionPane.DEFAULT_OPTION);
                                break;
                            case 3:
                                cadena = especialidad + ";" + doctor + ";" + fecha + ";" + "13:30" + "\n";

                                escritor.write(cadena);
                                escritor.close();
                                JOptionPane.showConfirmDialog(null, "The new appointment has been created sucessfully", "Information", JOptionPane.DEFAULT_OPTION);
                                break;
                            case 4:
                                cadena = especialidad + ";" + doctor + ";" + fecha + ";" + "15:00" + "\n";

                                escritor.write(cadena);
                                escritor.close();
                                JOptionPane.showConfirmDialog(null, "The new appointment has been created sucessfully", "Information", JOptionPane.DEFAULT_OPTION);
                                break;
                            case 5:
                                cadena = especialidad + ";" + doctor + ";" + fecha + ";" + "16:30" + "\n";

                                escritor.write(cadena);
                                escritor.close();
                                JOptionPane.showConfirmDialog(null, "The new appointment has been created sucessfully", "Information", JOptionPane.DEFAULT_OPTION);
                                break;
                            default:
                        }
                    }
                }
                
            }
            catch (Exception e) {
                System.out.println("Error al escribir");
            }
        } else {
            JOptionPane.showMessageDialog(null, "There's information missing to create appointment", "Warning", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_btnCreateAppointmentActionPerformed

    private void btnCreateAppointmentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCreateAppointmentMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCreateAppointmentMouseClicked

    private void btnCreateAppointmentMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCreateAppointmentMouseEntered
        btnCreateAppointment.setBackground(new Color(240,240,240));
    }//GEN-LAST:event_btnCreateAppointmentMouseEntered

    private void btnCreateAppointmentMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCreateAppointmentMouseExited
        btnCreateAppointment.setBackground(new Color(254,255,255));
    }//GEN-LAST:event_btnCreateAppointmentMouseExited

    private void btnSelectSpecialityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectSpecialityActionPerformed
        cmbDoctors.removeAllItems();
        panelHoras.setVisible(false);
        int seleccion = cmbSpeciality.getSelectedIndex();
        switch (seleccion) {
            case 0 -> {
                String[] generalMedicine = {"Dr. Laura Thompson", "Dr. James Carter", "Dr. Ana Mart√≠nez", "Dr. Kevin Brown"};
                for (String doctor : generalMedicine) {
                    cmbDoctors.addItem(doctor);
                }
            }
            case 1 -> {
                String[] pediatrics = {"Dr. Maria Gonz√°lez", "Dr. Eric Nguyen", "Dr. Sarah Patel"};
                for (String doctor : pediatrics) {
                    cmbDoctors.addItem(doctor);
                }
            }
            case 2 -> {
                String[] gynecology = {"Dr. Julia Herrera", "Dr. Monica Stein"};
                for (String doctor : gynecology) {
                    cmbDoctors.addItem(doctor);
                }
            }
            case 3 -> {
                String[] internalMedicine = {"Dr. Luis Ram√≠rez", "Dr. Katherine Blake", "Dr. Daniel Cho"};
                for (String doctor : internalMedicine) {
                    cmbDoctors.addItem(doctor);
                }
            }
            case 4 -> {
                String[] surgery = {"Dr. Michael O'Neill", "Dr. Ricardo Salas"};
                for (String doctor : surgery) {
                    cmbDoctors.addItem(doctor);
                }
            }
            case 5 -> {
                String[] psychology = {"Dr. Emma Lewis", "Dr. Jorge Mendoza", "Dr. Chloe Simmons"};
                for (String doctor : psychology) {
                    cmbDoctors.addItem(doctor);
                }
            }
            case 6 -> {
                String[] therapy = {"Dr. David Kim", "Dr. Carla Torres", "Dr. Noah Smith", "Dr. Sofia Ruiz", "Dr. Benjamin Lee", "Dr. Elena Vargas"};
                for (String doctor : therapy) {
                    cmbDoctors.addItem(doctor);
                }
            }
            default -> {
                cmbDoctors.addItem("Seleccione una especialidad v√°lida.");
            }
                
            
        }
                    
    }//GEN-LAST:event_btnSelectSpecialityActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bg;
    private javax.swing.JButton btnConfirm;
    private javax.swing.JButton btnCreateAppointment;
    private javax.swing.JButton btnSelectSpeciality;
    private javax.swing.JComboBox<String> cmbDoctors;
    private javax.swing.JComboBox<String> cmbSpeciality;
    private com.toedter.calendar.JDateChooser jCalendar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel panelHoras;
    private javax.swing.JPanel panelHoras1;
    // End of variables declaration//GEN-END:variables
}
